name: Vercel Preview Deployments
on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  BRANCH: ${{ github.ref_name }}
  VITE_FIREBASE_API_KEY: ${{secrets.FIREBASE_API_KEY}}
  VITE_FIREBASE_AUTH_DOMAIN: ${{secrets.FIREBASE_AUTH_DOMAIN}}
  VITE_FIREBASE_PROJECT_ID: ${{secrets.FIREBASE_PROJECT_ID}}
  VITE_FIREBASE_STORAGE_BUCKET: ${{secrets.FIREBASE_STORAGE_BUCKET}}
  VITE_FIREBASE_MESSAGING_SENDER_ID: ${{secrets.FIREBASE_MESSAGING_SENDER_ID}}
  VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
  VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
  VITE_FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL }}
permissions:
  contents: read
jobs:
  Build-and-Test:
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          egress-policy: audit
      - name: Checkout the Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Setup NodeJS
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
        with:
          node-version: '22'
      - name: Install pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: 9
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Ensure playwright has the latest browser binaries
        run: pnpx playwright install --with-deps && npx playwright install --with-deps
      - name: Ensure project is formatted and linted
        run: pnpm run lint
      - name: Ensure project syncs the configs
        run: pnpm run check
      - name: Build
        run: pnpm run build
      - name: Test
        run: pnpm run test
      - name: Setup GPG Keys
        uses: crazy-max/ghaction-import-gpg@cb9bde2e2525e640591a934b1fd28eef1dcaf5e5 # v6.2.0
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}
          git_committer_email: ${{ vars.GIT_AUTHOR_EMAIL }}
          #          fingerprint: ${{ vars.GPG_FINGERPRINT }}
          # - name: Create a release
          #   env:
          #     GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT_GITHUB }}
          #     GH_TOKEN: ${{ secrets.ACTIONS_PAT_GITHUB }}
          #   run: pnpm run release
  Deploy-Preview:
    runs-on: ubuntu-latest
    needs: Build-and-Test
    if: needs.Build-and-Test.result == 'success'
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          egress-policy: audit
      - name: Checkout the Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Decide Deployment Environment
        id: deployment_environment
        run: |
          if [[ ${{ env.BRANCH }} == "main" ]]; then
            echo "PROJECT_ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo echo "PROJECT_ENVIRONMENT=preview" >> $GITHUB_ENV
          fi
      - name: Setup NodeJS
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
        with:
          node-version: '22'
      - name: Install pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: 9
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Ensure project syncs the configs
        run: pnpm run check
      - name: Populate Preview Variables
        run: vercel pull --yes --environment=${{env.PROJECT_ENVIRONMENT}} --token=${{ env.VERCEL_TOKEN }}
      - name: Build Project
        run: vercel build --yes --token=${{ env.VERCEL_TOKEN }}
      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --token=${{ env.VERCEL_TOKEN }}
